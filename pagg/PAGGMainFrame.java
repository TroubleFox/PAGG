package pagg;

import java.awt.Component;
import java.awt.Image;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author troublefox
 */
public class PAGGMainFrame extends javax.swing.JFrame {

    private FieldTableModel fieldTableModel;
    private int s1row;
    private int s1col;
    private int s2row;
    private int s2col;
    /**
     * Creates new form PAGGMainFrame
     */
    public PAGGMainFrame() {
        
        fieldTableModel = new FieldTableModel();
//        ImageCellRenderer renderer = new ImageCellRenderer();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        Start = new javax.swing.JButton();
        movementbutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(fieldTableModel);
        for (int i = 0; i < 32; i++) {

            int colIndex = i;  // show image at (row 1, col 1)
            TableColumn col = jTable1.getColumnModel().getColumn(colIndex);
            ImageCellRenderer renderer = new ImageCellRenderer();
            col.setCellRenderer(renderer);
            //            col.setPreferredWidth(renderer.image.getWidth(null));
            col.setMaxWidth(32);
            jTable1.setRowHeight(32);
        }
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setText("jButton1");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        Start.setText("Start");
        Start.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StartMouseClicked(evt);
            }
        });

        movementbutton.setText("display movement");
        movementbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                movementbuttonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(469, 469, 469)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Start)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(movementbutton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(141, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(Start)
                    .addComponent(movementbutton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1034, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 797, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     

//        fieldTableModel.setValueAt(this, jTable1.getSelectedRow(), jTable1.getSelectedColumn());
        if( (fieldTableModel.getTileTable()[jTable1.getSelectedRow()][jTable1.getSelectedColumn()].isWalkable() 
         && !(fieldTableModel.getTileTable()[jTable1.getSelectedRow()][jTable1.getSelectedColumn()].isOccupied())) == true)
        {
            fieldTableModel.setValueAt(fieldTableModel.getPlayer1(), jTable1.getSelectedRow(), jTable1.getSelectedColumn());
//            System.out.println("von Zeile "+getS1row()+" und Spalte "+getS1col());
//            System.out.println("nach Zeile "+jTable1.getSelectedRow()+" und Spalte "+jTable1.getSelectedColumn());
//            System.out.println("originalTile: "+fieldTableModel.getTileTableOrigin()[getS1row()][getS1col()].getImage());
//            System.out.println("SpielfeldTile: "+fieldTableModel.getTileTable()[getS1row()][getS1col()].getImage());
//            fieldTableModel.setValueAt(fieldTableModel.getTileTableOrigin()[getS1row()][getS1col()], getS1row(), getS1col());
            fieldTableModel.setValueAt(fieldTableModel.getTileTableOrigin()[fieldTableModel.getPlayer1().getRow()][fieldTableModel.getPlayer1().getCol()], fieldTableModel.getPlayer1().getRow(),fieldTableModel.getPlayer1().getCol());
            fieldTableModel.getPlayer1().setRow(jTable1.getSelectedRow());
            fieldTableModel.getPlayer1().setCol(jTable1.getSelectedColumn());
            
        }
        else
        {
//            System.out.println("Bewegung nicht m√∂glich");
//            System.out.println("Zielort begehbar: "+fieldTableModel.getTileTable()[jTable1.getSelectedRow()][jTable1.getSelectedColumn()].isWalkable()
//            +";  besetzt: "+fieldTableModel.getTileTable()[jTable1.getSelectedRow()][jTable1.getSelectedColumn()].isOccupied());
        }
       
       
        fieldTableModel.fireTableDataChanged();
      
    }                                    

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {                                      
        for (int i = 0; i < 24; i++) {                                                    //Feldwertausgabe
            for (int j = 0; j < 32; j++) {
                System.out.print(fieldTableModel.getTileTable()[i][j].isSightBlock()+",");
            }
            System.out.println("");
        }
        System.out.println("");
        System.out.println(fieldTableModel.getTileTableOrigin()[0][0].toString());
        System.out.println(fieldTableModel.getTileTable()[0][0].toString());
     
     fieldTableModel.fireTableDataChanged();
    }                                     

    private void StartMouseClicked(java.awt.event.MouseEvent evt) {                                   
//        System.out.println("originalTile: "+fieldTableModel.getTileTableOrigin()[11][3].getImage());
        fieldTableModel.getPlayer1().setOccupied(true);
//        fieldTableModel.getPlayer2().setOccupied(true);
        fieldTableModel.getPlayer1().setRow(11);
        fieldTableModel.getPlayer1().setCol(3);
        
//        s2row = 10;
//        s2col = 28;
        
        fieldTableModel.getTileTable()[11][3] = fieldTableModel.getPlayer1();
//        fieldTableModel.getTileTable()[10][28] = fieldTableModel.getPlayer2();
        fieldTableModel.fireTableDataChanged();
//        System.out.println("originalTile: "+fieldTableModel.getTileTableOrigin()[11][3].getImage());
                
//        fieldTableModel.getSpieler().setOccupied(true);
//        System.out.println(fieldTableModel.getTileTable()[0][0].getImage());
//        fieldTableModel.getTileTable()[1][1].setImage(new ImageIcon("src/images/0.jpg"));       //ersetzt ein Tileobjekt im TileTable
//        fieldTableModel.setValueAt(this, WIDTH, WIDTH);                                         //ersetzt ein Objekt in der Anzeige = neuer Spielstand
//        fieldTableModel.getSpieler().setImage(new ImageIcon("src/images/spieler1.jpg"));
    }                                  

    private void movementbuttonMouseClicked(java.awt.event.MouseEvent evt) {                                            
        System.out.println("Ausgabe Koordinaten in MainFrame aus fieldTableModel: "+fieldTableModel.getPlayer1().getRow()+" "+fieldTableModel.getPlayer1().getCol());
        
        ShowMovement sm = new ShowMovement();
        System.out.println("kurz vor Listenausgabe");
        for (Coordinates e : sm.getClosedList() ) {
            System.out.println("x: "+e.getRow()+" y: "+e.getCol());
        }

        
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PAGGMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PAGGMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PAGGMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PAGGMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PAGGMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton Start;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton movementbutton;
    // End of variables declaration                   

    /**
     * @return the s1row
     */
    public int getS1row() {
        return s1row;
    }

    /**
     * @param s1row the s1row to set
     */
    public void setS1row(int s1row) {
        this.s1row = s1row;
    }

    /**
     * @return the s1col
     */
    public int getS1col() {
        return s1col;
    }

    /**
     * @param s1col the s1col to set
     */
    public void setS1col(int s1col) {
        this.s1col = s1col;
    }
    
    public FieldTableModel getFieldTableModel()
    {
        return fieldTableModel;
    }


    class ImageCellRenderer extends JLabel implements TableCellRenderer
    {

        public Component getTableCellRendererComponent(JTable table, Object value,
                                                       boolean isSelected,
                                                       boolean hasFocus,
                                                       int rowIndex, int colIndex)
        {
              
            setIcon(fieldTableModel.getTileTable()[rowIndex][colIndex].getImage());
//            setIcon(((Tile) value).getImage());                                      //alternativ auch m√∂glich
            setText("");
//    //            setText("");
//    //        if(rowIndex == 0)
//    //        {
//    //            setIcon(new ImageIcon(image));
//    //            setText("");
//    //        }
//    //        else
//    //        {
//    //            setIcon((ImageIcon)null);
//    //            setText(value.toString());
//    //        }
            return this;
        }    

    }
}
